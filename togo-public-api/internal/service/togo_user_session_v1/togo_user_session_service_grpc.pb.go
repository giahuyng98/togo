// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package togo_user_session_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TogoUserSessionServiceClient is the client API for TogoUserSessionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TogoUserSessionServiceClient interface {
	RegisterOrLogin(ctx context.Context, in *RegisterOrLoginRequest, opts ...grpc.CallOption) (*RegisterOrLoginResponse, error)
	VerifyToken(ctx context.Context, in *VerifyTokenRequest, opts ...grpc.CallOption) (*VerifyTokenResponse, error)
}

type togoUserSessionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTogoUserSessionServiceClient(cc grpc.ClientConnInterface) TogoUserSessionServiceClient {
	return &togoUserSessionServiceClient{cc}
}

func (c *togoUserSessionServiceClient) RegisterOrLogin(ctx context.Context, in *RegisterOrLoginRequest, opts ...grpc.CallOption) (*RegisterOrLoginResponse, error) {
	out := new(RegisterOrLoginResponse)
	err := c.cc.Invoke(ctx, "/togo.user_session.v1.TogoUserSessionService/RegisterOrLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *togoUserSessionServiceClient) VerifyToken(ctx context.Context, in *VerifyTokenRequest, opts ...grpc.CallOption) (*VerifyTokenResponse, error) {
	out := new(VerifyTokenResponse)
	err := c.cc.Invoke(ctx, "/togo.user_session.v1.TogoUserSessionService/VerifyToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TogoUserSessionServiceServer is the server API for TogoUserSessionService service.
// All implementations should embed UnimplementedTogoUserSessionServiceServer
// for forward compatibility
type TogoUserSessionServiceServer interface {
	RegisterOrLogin(context.Context, *RegisterOrLoginRequest) (*RegisterOrLoginResponse, error)
	VerifyToken(context.Context, *VerifyTokenRequest) (*VerifyTokenResponse, error)
}

// UnimplementedTogoUserSessionServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTogoUserSessionServiceServer struct {
}

func (UnimplementedTogoUserSessionServiceServer) RegisterOrLogin(context.Context, *RegisterOrLoginRequest) (*RegisterOrLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterOrLogin not implemented")
}
func (UnimplementedTogoUserSessionServiceServer) VerifyToken(context.Context, *VerifyTokenRequest) (*VerifyTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyToken not implemented")
}

// UnsafeTogoUserSessionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TogoUserSessionServiceServer will
// result in compilation errors.
type UnsafeTogoUserSessionServiceServer interface {
	mustEmbedUnimplementedTogoUserSessionServiceServer()
}

func RegisterTogoUserSessionServiceServer(s grpc.ServiceRegistrar, srv TogoUserSessionServiceServer) {
	s.RegisterService(&TogoUserSessionService_ServiceDesc, srv)
}

func _TogoUserSessionService_RegisterOrLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterOrLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TogoUserSessionServiceServer).RegisterOrLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/togo.user_session.v1.TogoUserSessionService/RegisterOrLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TogoUserSessionServiceServer).RegisterOrLogin(ctx, req.(*RegisterOrLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TogoUserSessionService_VerifyToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TogoUserSessionServiceServer).VerifyToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/togo.user_session.v1.TogoUserSessionService/VerifyToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TogoUserSessionServiceServer).VerifyToken(ctx, req.(*VerifyTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TogoUserSessionService_ServiceDesc is the grpc.ServiceDesc for TogoUserSessionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TogoUserSessionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "togo.user_session.v1.TogoUserSessionService",
	HandlerType: (*TogoUserSessionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterOrLogin",
			Handler:    _TogoUserSessionService_RegisterOrLogin_Handler,
		},
		{
			MethodName: "VerifyToken",
			Handler:    _TogoUserSessionService_VerifyToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/togo_user_session_service.proto",
}
