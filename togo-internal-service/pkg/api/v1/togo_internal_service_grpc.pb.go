// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package togo_internal_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TogoInternalServiceClient is the client API for TogoInternalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TogoInternalServiceClient interface {
	ListTask(ctx context.Context, in *ListTaskRequest, opts ...grpc.CallOption) (*ListTaskResponse, error)
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*Task, error)
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*Task, error)
}

type togoInternalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTogoInternalServiceClient(cc grpc.ClientConnInterface) TogoInternalServiceClient {
	return &togoInternalServiceClient{cc}
}

func (c *togoInternalServiceClient) ListTask(ctx context.Context, in *ListTaskRequest, opts ...grpc.CallOption) (*ListTaskResponse, error) {
	out := new(ListTaskResponse)
	err := c.cc.Invoke(ctx, "/togo.internal.v1.TogoInternalService/ListTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *togoInternalServiceClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/togo.internal.v1.TogoInternalService/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *togoInternalServiceClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/togo.internal.v1.TogoInternalService/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TogoInternalServiceServer is the server API for TogoInternalService service.
// All implementations should embed UnimplementedTogoInternalServiceServer
// for forward compatibility
type TogoInternalServiceServer interface {
	ListTask(context.Context, *ListTaskRequest) (*ListTaskResponse, error)
	GetTask(context.Context, *GetTaskRequest) (*Task, error)
	CreateTask(context.Context, *CreateTaskRequest) (*Task, error)
}

// UnimplementedTogoInternalServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTogoInternalServiceServer struct {
}

func (UnimplementedTogoInternalServiceServer) ListTask(context.Context, *ListTaskRequest) (*ListTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTask not implemented")
}
func (UnimplementedTogoInternalServiceServer) GetTask(context.Context, *GetTaskRequest) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedTogoInternalServiceServer) CreateTask(context.Context, *CreateTaskRequest) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}

// UnsafeTogoInternalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TogoInternalServiceServer will
// result in compilation errors.
type UnsafeTogoInternalServiceServer interface {
	mustEmbedUnimplementedTogoInternalServiceServer()
}

func RegisterTogoInternalServiceServer(s grpc.ServiceRegistrar, srv TogoInternalServiceServer) {
	s.RegisterService(&TogoInternalService_ServiceDesc, srv)
}

func _TogoInternalService_ListTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TogoInternalServiceServer).ListTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/togo.internal.v1.TogoInternalService/ListTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TogoInternalServiceServer).ListTask(ctx, req.(*ListTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TogoInternalService_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TogoInternalServiceServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/togo.internal.v1.TogoInternalService/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TogoInternalServiceServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TogoInternalService_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TogoInternalServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/togo.internal.v1.TogoInternalService/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TogoInternalServiceServer).CreateTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TogoInternalService_ServiceDesc is the grpc.ServiceDesc for TogoInternalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TogoInternalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "togo.internal.v1.TogoInternalService",
	HandlerType: (*TogoInternalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTask",
			Handler:    _TogoInternalService_ListTask_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _TogoInternalService_GetTask_Handler,
		},
		{
			MethodName: "CreateTask",
			Handler:    _TogoInternalService_CreateTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/togo_internal_service.proto",
}
