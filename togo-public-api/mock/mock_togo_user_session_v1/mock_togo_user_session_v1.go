// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock_togo_user_session_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	sync "sync"
	"togo-public-api/internal/service/togo_user_session_v1"
)

// Ensure, that TogoUserSessionServiceClientMock does implement togo_user_session_v1.TogoUserSessionServiceClient.
// If this is not the case, regenerate this file with moq.
var _ togo_user_session_v1.TogoUserSessionServiceClient = &TogoUserSessionServiceClientMock{}

// TogoUserSessionServiceClientMock is a mock implementation of togo_user_session_v1.TogoUserSessionServiceClient.
//
// 	func TestSomethingThatUsesTogoUserSessionServiceClient(t *testing.T) {
//
// 		// make and configure a mocked togo_user_session_v1.TogoUserSessionServiceClient
// 		mockedTogoUserSessionServiceClient := &TogoUserSessionServiceClientMock{
// 			RegisterOrLoginFunc: func(ctx context.Context, in *togo_user_session_v1.RegisterOrLoginRequest, opts ...grpc.CallOption) (*togo_user_session_v1.RegisterOrLoginResponse, error) {
// 				panic("mock out the RegisterOrLogin method")
// 			},
// 			VerifyTokenFunc: func(ctx context.Context, in *togo_user_session_v1.VerifyTokenRequest, opts ...grpc.CallOption) (*togo_user_session_v1.VerifyTokenResponse, error) {
// 				panic("mock out the VerifyToken method")
// 			},
// 		}
//
// 		// use mockedTogoUserSessionServiceClient in code that requires togo_user_session_v1.TogoUserSessionServiceClient
// 		// and then make assertions.
//
// 	}
type TogoUserSessionServiceClientMock struct {
	// RegisterOrLoginFunc mocks the RegisterOrLogin method.
	RegisterOrLoginFunc func(ctx context.Context, in *togo_user_session_v1.RegisterOrLoginRequest, opts ...grpc.CallOption) (*togo_user_session_v1.RegisterOrLoginResponse, error)

	// VerifyTokenFunc mocks the VerifyToken method.
	VerifyTokenFunc func(ctx context.Context, in *togo_user_session_v1.VerifyTokenRequest, opts ...grpc.CallOption) (*togo_user_session_v1.VerifyTokenResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// RegisterOrLogin holds details about calls to the RegisterOrLogin method.
		RegisterOrLogin []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *togo_user_session_v1.RegisterOrLoginRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// VerifyToken holds details about calls to the VerifyToken method.
		VerifyToken []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *togo_user_session_v1.VerifyTokenRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
	}
	lockRegisterOrLogin sync.RWMutex
	lockVerifyToken     sync.RWMutex
}

// RegisterOrLogin calls RegisterOrLoginFunc.
func (mock *TogoUserSessionServiceClientMock) RegisterOrLogin(ctx context.Context, in *togo_user_session_v1.RegisterOrLoginRequest, opts ...grpc.CallOption) (*togo_user_session_v1.RegisterOrLoginResponse, error) {
	callInfo := struct {
		Ctx  context.Context
		In   *togo_user_session_v1.RegisterOrLoginRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockRegisterOrLogin.Lock()
	mock.calls.RegisterOrLogin = append(mock.calls.RegisterOrLogin, callInfo)
	mock.lockRegisterOrLogin.Unlock()
	if mock.RegisterOrLoginFunc == nil {
		var (
			registerOrLoginResponseOut *togo_user_session_v1.RegisterOrLoginResponse
			errOut                     error
		)
		return registerOrLoginResponseOut, errOut
	}
	return mock.RegisterOrLoginFunc(ctx, in, opts...)
}

// RegisterOrLoginCalls gets all the calls that were made to RegisterOrLogin.
// Check the length with:
//     len(mockedTogoUserSessionServiceClient.RegisterOrLoginCalls())
func (mock *TogoUserSessionServiceClientMock) RegisterOrLoginCalls() []struct {
	Ctx  context.Context
	In   *togo_user_session_v1.RegisterOrLoginRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *togo_user_session_v1.RegisterOrLoginRequest
		Opts []grpc.CallOption
	}
	mock.lockRegisterOrLogin.RLock()
	calls = mock.calls.RegisterOrLogin
	mock.lockRegisterOrLogin.RUnlock()
	return calls
}

// VerifyToken calls VerifyTokenFunc.
func (mock *TogoUserSessionServiceClientMock) VerifyToken(ctx context.Context, in *togo_user_session_v1.VerifyTokenRequest, opts ...grpc.CallOption) (*togo_user_session_v1.VerifyTokenResponse, error) {
	callInfo := struct {
		Ctx  context.Context
		In   *togo_user_session_v1.VerifyTokenRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockVerifyToken.Lock()
	mock.calls.VerifyToken = append(mock.calls.VerifyToken, callInfo)
	mock.lockVerifyToken.Unlock()
	if mock.VerifyTokenFunc == nil {
		var (
			verifyTokenResponseOut *togo_user_session_v1.VerifyTokenResponse
			errOut                 error
		)
		return verifyTokenResponseOut, errOut
	}
	return mock.VerifyTokenFunc(ctx, in, opts...)
}

// VerifyTokenCalls gets all the calls that were made to VerifyToken.
// Check the length with:
//     len(mockedTogoUserSessionServiceClient.VerifyTokenCalls())
func (mock *TogoUserSessionServiceClientMock) VerifyTokenCalls() []struct {
	Ctx  context.Context
	In   *togo_user_session_v1.VerifyTokenRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *togo_user_session_v1.VerifyTokenRequest
		Opts []grpc.CallOption
	}
	mock.lockVerifyToken.RLock()
	calls = mock.calls.VerifyToken
	mock.lockVerifyToken.RUnlock()
	return calls
}
